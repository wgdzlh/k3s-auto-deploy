# -*- mode: ruby -*-
# vi: set ft=ruby :

# how to use:
# $ vagrant up --no-provision --no-tty
# $ vagrant provision
# then login to IP_BASE.2 with user: root, password: vagrant, just like a real OpenWrt router.

HOST_NETWORK = "vboxnet1"
IP_BASE = "172.16.1"
BRGED_IF = "en6"

Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "vladimir-babichev/openwrt-19.07"

  vmname = "test-openwrt_19.07"
  config.vm.define vmname

  config.trigger.before :up do |trigger|
    trigger.info = "setting host-only network: #{HOST_NETWORK}"
    trigger.run = {inline: "VBoxManage hostonlyif ipconfig #{HOST_NETWORK} --ip #{IP_BASE}.1"}
  end

  config.vm.provider "virtualbox" do |v|
    v.name = vmname
    v.customize ["modifyvm", :id,
    "--boot2", "none",
    "--boot3", "none",
    "--nic2", "hostonly", "--hostonlyadapter2", HOST_NETWORK,
    "--nicpromisc2", "allow-all",
    "--nic3", "bridged", "--bridgeadapter3", BRGED_IF,
    "--nicpromisc3", "allow-all",
  ]
  end

  config.vm.provision "shell", privileged: false, args: [IP_BASE], inline: <<-SHELL
    uci delete network.mng
    uci set network.wan.ifname='eth0'
    uci set network.lan.ifname='eth1 eth2'
    uci set network.lan.proto='static'
    uci set network.lan.type='bridge'
    uci set network.lan.ipaddr="${1}.2"
    uci set network.lan.netmask='255.255.255.0'
    uci commit
    fsync /etc/config/network
    /etc/init.d/network restart
  SHELL
end
